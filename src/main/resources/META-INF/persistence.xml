<?xml version="1.0" encoding="UTF-8" ?>
<persistence xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns="http://xmlns.jcp.org/xml/ns/persistence"
             xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd"
             version="2.1">

    <persistence-unit name="examplePersistenceUnit" transaction-type="RESOURCE_LOCAL">

        <!-- no need to specify a persistence provider if only 1 is used -->
        <!--<provider></provider>-->

        <class>entities.ids.sequence.EntityWithIdSequence</class>
        <class>entities.ids.listener.EntityWithIdListener</class>
        <class>entities.ids.table.EntityAWithIdGeneratedFromTable</class>
        <class>entities.ids.table.EntityBWithIdGeneratedFromTable</class>

        <class>entities.inheritance.joined.discriminator.InheritanceJoinedTablesDiscriminatorConcreteClassA</class>
        <class>entities.inheritance.joined.discriminator.InheritanceJoinedTablesDiscriminatorConcreteClassB</class>
        <class>entities.inheritance.joined.discriminator.InheritanceJoinedTablesDiscriminatorSuperClass</class>
        <class>entities.inheritance.joined.InheritanceJoinedTablesConcreteClassA</class>
        <class>entities.inheritance.joined.InheritanceJoinedTablesConcreteClassB</class>
        <class>entities.inheritance.joined.InheritanceJoinedTablesSuperClass</class>
        <class>entities.inheritance.single.InheritanceSingleTableConcreteClassA</class>
        <class>entities.inheritance.single.InheritanceSingleTableConcreteClassB</class>
        <class>entities.inheritance.single.InheritanceSingleTableSuperClass</class>
        <class>entities.inheritance.InheritanceMappedSuperClass</class>

        <class>relationships.embedded.EmbeddableBean</class>
        <class>relationships.embedded.EntityWithEmbeddable</class>

        <class>relationships.onetoone.unidirectional.nocascade.strict.Case3Parent</class>
        <class>relationships.onetoone.unidirectional.nocascade.strict.Case3Child</class>
        <class>relationships.onetoone.unidirectional.nocascade.notstrict.Case4Parent</class>
        <class>relationships.onetoone.unidirectional.nocascade.notstrict.Case4Child</class>
        <class>relationships.onetoone.unidirectional.cascade.strict.Case1Parent</class>
        <class>relationships.onetoone.unidirectional.cascade.strict.Case1Child</class>
        <class>relationships.onetoone.unidirectional.cascade.notstrict.Case2Parent</class>
        <class>relationships.onetoone.unidirectional.cascade.notstrict.Case2Child</class>
        <class>relationships.onetoone.bidirectional.A</class>
        <class>relationships.onetoone.bidirectional.B</class>

        <class>relationships.manytomany.nocascade.NoCascadeM</class>
        <class>relationships.manytomany.nocascade.NoCascadeN</class>
        <class>relationships.manytomany.cascade.bothways.CascadeBothWaysM</class>
        <class>relationships.manytomany.cascade.bothways.CascadeBothWaysN</class>
        <class>relationships.manytomany.cascade.oneside.CascadeOneSideM</class>
        <class>relationships.manytomany.cascade.oneside.CascadeOneSideN</class>
        <class>relationships.manytomany.map.MMap</class>
        <class>relationships.manytomany.map.NMap</class>
        <class>relationships.manytomany.bothowners.M</class>
        <class>relationships.manytomany.bothowners.N</class>

        <class>relationships.onetomany.notstrict.OTOMNotStrictChild</class>
        <class>relationships.onetomany.notstrict.OTOMNotStrictParent</class>
        <class>relationships.onetomany.strict.OTOMStrictChild</class>
        <class>relationships.onetomany.strict.OTOMStrictParent</class>
        <class>relationships.onetomany.map.ChildMap</class>
        <class>relationships.onetomany.map.ParentMap</class>
        <class>relationships.onetomany.joinonnopk.JONPKChild</class>
        <class>relationships.onetomany.joinonnopk.JONPKParent</class>

        <class>relationships.manytoone.notstrict.MTOONotStrictChild</class>
        <class>relationships.manytoone.notstrict.MTOONotStrictParent</class>
        <class>relationships.manytoone.strict.MTOOStrictChild</class>
        <class>relationships.manytoone.strict.MTOOStrictParent</class>
        <class>relationships.manytoone.cascade.MTOOCascadeChild</class>
        <class>relationships.manytoone.cascade.MTOOCascadeParent</class>

        <class>relationships.lazyloading.manytomany.MTOMLazyM</class>
        <class>relationships.lazyloading.manytomany.MTOMLazyN</class>
        <class>relationships.lazyloading.onetomany.OTOMLazyChild</class>
        <class>relationships.lazyloading.onetomany.OTOMLazyParent</class>
        <class>relationships.lazyloading.onetoone.OTOOA</class>
        <class>relationships.lazyloading.onetoone.OTOOB</class>

        <class>relationships.lazyloading.toomanyeagers.TMECenter</class>
        <class>relationships.lazyloading.toomanyeagers.TMELink1</class>
        <class>relationships.lazyloading.toomanyeagers.TMELink2</class>
        <class>relationships.lazyloading.toomanyeagers.TMELink3</class>
        <class>relationships.lazyloading.toomanyeagers.TMELink4</class>

        <class>relationships.orphans.onetoone.bothways.OTOOrphanBothWaysA</class>
        <class>relationships.orphans.onetoone.bothways.OTOOrphanBothWaysB</class>
        <class>relationships.orphans.onetoone.owningside.OTOOrphanOwningSideA</class>
        <class>relationships.orphans.onetoone.owningside.OTOOrphanOwningSideB</class>
        <class>relationships.orphans.onetoone.notowningside.OTOOrphanNotOwningSideA</class>
        <class>relationships.orphans.onetoone.notowningside.OTOOrphanNotOwningSideB</class>
        <class>relationships.orphans.onetomany.OTOMOrphanA</class>
        <class>relationships.orphans.onetomany.OTOMOrphanB</class>

        <class>relationships.orderby.manytomany.MTOMOrderM</class>
        <class>relationships.orderby.manytomany.MTOMOrderN</class>

        <class>entities.simple.Entity</class>
        <class>entities.special.EntityWithEnums</class>
        <class>entities.special.EntityWithPrimitives</class>
        <class>entities.special.EntityWithTransient</class>
        <class>entities.special.EntityWithLOB</class>
        <class>entities.special.EntityWithDate</class>
        <class>entities.converters.EntityWithAttributeConverters</class>
        <class>entities.listener.EntityWithListener</class>
        <class>entities.projection.EntityWithProjection</class>
        <class>entities.aggregated.Person</class>
        <class>entities.aggregated.Country</class>

        <class>lock.VersionedEntity</class>

        <class>queries.named.EntityWithNamedQuery</class>
        <class>queries.named.nativ.EntityWithNamedNativeQuery</class>
        <class>queries.named.nativ.NamedNativeQueriesDefinition</class>
        <class>queries.named.nativ.NamedNativeQueriesWithResultSetMappingDefinition</class>
        <class>queries.named.NamedQueriesDefinition</class>

        <class>entities.inheritance.mixed.ConcreteClassA</class>
        <class>entities.inheritance.mixed.ConcreteClassB</class>
        <class>entities.inheritance.mixed.ConcreteSuperClass</class>
        <class>entities.inheritance.mixed.MixedContainer</class>

        <class>queries.simple.SimpleQueryEntity</class>
        <class>queries.bulk.BulkQueryEntity</class>

        <exclude-unlisted-classes>true</exclude-unlisted-classes>

        <properties>

            <!-- Echo all executed SQL to stdout -->
            <property name="hibernate.show_sql" value="true"/>
            <property name="hibernate.format_sql" value="true"/>
            <property name="hibernate.use_sql_comments" value="true"/>

            <!-- Database connection settings -->
            <property name="javax.persistence.jdbc.driver" value="${database.driver}"/>
            <property name="javax.persistence.jdbc.url" value="${database.url}"/>
            <property name="javax.persistence.jdbc.user" value="${database.username}"/>
            <property name="javax.persistence.jdbc.password" value="${database.password}"/>

            <!-- not 20 connections as default is -->
            <property name="hibernate.connection.pool_size" value="2"/>

            <!-- SQL dialect -->
            <property name="hibernate.dialect" value="${database.dialect}"/>

            <property name="hibernate.hbm2ddl.auto" value="validate"/>

            <!--<property name="javax.persistence.schema-generation.database.action" value="none"/>-->
            <property name="javax.persistence.schema-generation.database.action" value="drop-and-create"/>

            <!-- generate scripts -->
            <!--<property name="javax.persistence.schema-generation.scripts.action" value="drop-and-create"/>-->
            <!--<property name="javax.persistence.schema-generation.scripts.create-target" value="file:/c://create.sql"/>-->
            <!--<property name="javax.persistence.schema-generation.scripts.drop-target" value="file:/c://drop.sql"/>-->

            <!-- seems to be ignored by Hibernate in standard edition usage, to be
                tested in an enterprise edition usage -->
            <property name="javax.persistence.query.timeout" value="100"/>

        </properties>
    </persistence-unit>
</persistence>